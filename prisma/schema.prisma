// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id                      Int                       @id @default(autoincrement())
  name                    String
  lastname                String
  dni                     String
  email                   String?
  phone                   String?
  password                String
  role                    Role                      @relation(fields: [roleId], references: [id])
  roleId                  Int
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Account                 Account[]
  UserStock               UserStock[]
  transactions            Transaction[]
  loans                   Loan[]
  SocialFundsTransactions SocialFundsTransactions[]
  Incomes                 Incomes[]
  Withdrawals             Withdrawals[]
  DepositorPayouts        DepositorPayouts[]
  AdministrativeExpenses  AdministrativeExpenses[]
  Dividends               Dividends[]
  SocialFundsExpenses     SocialFundsExpenses[]
  Expenses                Expenses[]
  FormSubmission          FormSubmission[]
}

model BankIdentity {
  id                      Int                       @id @default(autoincrement())
  name                    String
  avatar                  String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  Account                 Account[]
  Stock                   Stock[]
  SocialFundsTransactions SocialFundsTransactions[]
  SocialFundsExpenses     SocialFundsExpenses[]
}

model AccountType {
  id      Int       @id @default(autoincrement())
  name    String
  Account Account[]
}

model Account {
  id             Int           @id @default(autoincrement())
  number         String
  balance        Float?
  userId         Int?
  user           User?         @relation(fields: [userId], references: [id])
  bankIdentityId Int?
  bankIdentity   BankIdentity? @relation(fields: [bankIdentityId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accountTypeId  Int
  accountType    AccountType   @relation(fields: [accountTypeId], references: [id])
  Transaction    Transaction[]
  TransferFrom   Transfer[]    @relation(name: "fromAccount")
  TransferTo     Transfer[]    @relation(name: "toAccount")
}

model TransactionType {
  id          Int           @id @default(autoincrement())
  name        String
  Transaction Transaction[]
}

model LoanType {
  id           Int    @id @default(autoincrement())
  name         String
  interestRate Float?
  Loan         Loan[]
}

model Loan {
  id                 Int                   @id @default(autoincrement())
  amount             Float //amount of loan
  userId             Int //user relation id
  interestRate       Float //interest reate of loan
  status             String // status of loan
  paid               Boolean               @default(false) //is is paid this loan
  // months             Int //months of loan (now is initialInstallments)
  paymentFrecuency   String                @default("monthly")
  //inital of installments generated.
  initalInstallments Int                   @map("months")
  user               User                  @relation(fields: [userId], references: [id])
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  loanTypeId         Int
  date               DateTime
  loanType           LoanType              @relation(fields: [loanTypeId], references: [id])
  payments           LoanPayment[]
  interestPayments   LoanInterestPayment[]
  loanInstallments   LoanInstallment[]
}

model LoanInstallment {
  id                  Int                   @id @default(autoincrement())
  payment             Float //capital
  interest            Float //interes
  paid                Boolean               @default(false)
  balance             Float?
  loanId              Int
  loan                Loan?                 @relation(fields: [loanId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  loanPayments        LoanPayment[]
  LoanInterestPayment LoanInterestPayment[]
  date                DateTime
}

model LoanPayment {
  id            Int              @id @default(autoincrement())
  amount        Float
  loanId        Int?
  loan          Loan?            @relation(fields: [loanId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  installmentId Int?
  installment   LoanInstallment? @relation(fields: [installmentId], references: [id])
}

model LoanInterestPayment {
  id            Int              @id @default(autoincrement())
  amount        Float
  loanId        Int?
  loan          Loan?            @relation(fields: [loanId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  installmentId Int?
  installment   LoanInstallment? @relation(fields: [installmentId], references: [id])
}

model Transaction {
  id          Int             @id @default(autoincrement())
  amount      Float
  userId      Int?
  user        User?           @relation(fields: [userId], references: [id])
  accountId   Int?
  account     Account?        @relation(fields: [accountId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  typeId      Int
  type        TransactionType @relation(fields: [typeId], references: [id])
  description String
}

model Transfer {
  id            Int      @id @default(autoincrement())
  amount        Float
  fromAccountId Int
  fromAccount   Account  @relation(name: "fromAccount", fields: [fromAccountId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String
  toAccountId   Int
  toAccount     Account  @relation(name: "toAccount", fields: [toAccountId], references: [id])
}

model Stock {
  id             Int          @id @default(autoincrement())
  name           String
  price          Float
  available      Int
  total          Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  bankIdentityId Int
  bankIdentity   BankIdentity @relation(fields: [bankIdentityId], references: [id])
  UserStock      UserStock[]
}

//sotcks con usuarios

model UserStock {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  stockId   Int?
  stock     Stock?   @relation(fields: [stockId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialFunds {
  id                      Int                       @id @default(autoincrement())
  name                    String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  SocialFundsTransactions SocialFundsTransactions[]
  SocialFundsExpenses     SocialFundsExpenses[]
}

model SocialFundsTransactions {
  id             Int           @id @default(autoincrement())
  socialFundsId  Int
  userId         Int?
  user           User?         @relation(fields: [userId], references: [id])
  amount         Float
  description    String
  socialFunds    SocialFunds   @relation(fields: [socialFundsId], references: [id])
  createdAt      DateTime      @default(now())
  date           DateTime
  updatedAt      DateTime      @updatedAt
  BankIdentity   BankIdentity? @relation(fields: [bankIdentityId], references: [id])
  bankIdentityId Int?
}

model SocialFundsExpenses {
  id             Int           @id @default(autoincrement())
  socialFundsId  Int
  userId         Int?
  user           User?         @relation(fields: [userId], references: [id])
  amount         Float
  description    String
  socialFunds    SocialFunds   @relation(fields: [socialFundsId], references: [id])
  createdAt      DateTime      @default(now())
  date           DateTime
  updatedAt      DateTime      @updatedAt
  BankIdentity   BankIdentity? @relation(fields: [bankIdentityId], references: [id])
  bankIdentityId Int?
}

model IncomesType {
  id      Int       @id @default(autoincrement())
  name    String
  Incomes Incomes[]
}

// incomes transactions 
model Incomes {
  id          Int         @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  userId      Int?
  user        User?       @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  typeId      Int
  type        IncomesType @relation(fields: [typeId], references: [id])
}

//model withdrawals 

model Withdrawals {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//model depositos payout

model DepositorPayouts {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//model AdministrativeExpenses
model AdministrativeExpenses {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//modelo para dividendos

model Dividends {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExpensesType {
  id       Int        @id @default(autoincrement())
  name     String
  Expenses Expenses[]
}

// incomes transactions 
model Expenses {
  id          Int          @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime
  userId      Int?
  user        User?        @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  typeId      Int
  type        ExpensesType @relation(fields: [typeId], references: [id])
}

model Form {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  key            String?
  status         String           @default("draft") // e.g., "draft", "published", "archived"
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  fields         Field[]
  FormSubmission FormSubmission[]
}

model Field {
  id            Int         @id @default(autoincrement())
  formId        Int
  form          Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  label         String
  type          String // e.g., "text", "number", "email", "date", "select", "checkbox", "radio", "textarea"
  required      Boolean     @default(false)
  placeholder   String? // Optional placeholder text
  options       String[] // Array of options for select, checkbox, or radio fields
  minLength     Int? // For text/textarea validation
  maxLength     Int? // For text/textarea validation
  minValue      Float? // For number/date validation
  maxValue      Float? // For number/date validation
  pattern       String? // Regex pattern for validation (e.g., email format)
  order         Int         @default(0) // For controlling field display order
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  FormFielValue FielValue[]
}

model FormSubmission {
  id        Int         @id @default(autoincrement())
  formId    Int
  form      Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId    Int?
  user      User?       @relation(fields: [userId], references: [id])
  data      Json? // Store the submitted data as JSON
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  values    FielValue[]
}

model FielValue {
  id               Int            @id @default(autoincrement())
  formSubmissionId Int
  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id], onDelete: Cascade)
  fieldId          Int
  field            Field          @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value            String? // Single value for single-input fields
  values           String[] // Array for multiple values (e.g., checkboxes, multi-select)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
